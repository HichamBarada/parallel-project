#include <stdio.h>
#include <iostream>
#include <chrono>
#include <mpi.h>

// Device function to compute the LCS length
int lcs(char *X, char *Y, int m, int n) {
    if (m == 0 || n == 0)
        return 0;
    if (X[m - 1] == Y[n - 1])
        return lcs(X, Y, m - 1, n - 1) + 1;
    else
        return std::max(lcs(X, Y, m - 1, n), lcs(X, Y, m, n - 1));
}

int main(int argc, char *argv[]) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    char X[] = "ABCBD";
    char Y[] = "BDCAB";

    int m = sizeof(X) - 1;
    int n = sizeof(Y) - 1;

    int h_result;

    printf("Process %d of %d\n", rank, size);
    printf("Number of inputs: %d\n", m + n);

    auto start = std::chrono::high_resolution_clock::now();

    if (rank == 0) {
        h_result = lcs(X, Y, m, n);
    }

    auto end = std::chrono::high_resolution_clock::now();
    double time_taken = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();
    time_taken *= 1e-9;

    printf("Execution time: %f seconds\n", time_taken);

    MPI_Finalize();

    return 0;
}